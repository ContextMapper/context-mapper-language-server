import { inject, type Module } from 'langium'
import {
  createDefaultModule,
  createDefaultSharedModule,
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type PartialLangiumServices
} from 'langium/lsp'
import { ContextMapperDslGeneratedModule, ContextMapperDslGeneratedSharedModule } from './generated/module.js'
import { ContextMapperDslValidator } from './validation/ContextMapperDslValidator.js'
import { ContextMapperDslSemanticTokenProvider } from './semantictokens/ContextMapperDslSemanticTokenProvider.js'
import { SemanticTokenProviderRegistry } from './semantictokens/SemanticTokenProviderRegistry.js'
import { ContextMapperDslValidationRegistry } from './validation/ContextMapperDslValidationRegistry.js'
import { ContextMapperValidationProviderRegistry } from './validation/ContextMapperValidationProviderRegistry.js'
import { ContextMapperDslScopeProvider } from './references/ContextMapperDslScopeProvider.js'
import { ContextMapperDslFoldingRangeProvider } from './folding/ContextMapperDslFoldingRageProvider.js'
import { ContextMapperDslScopeComputation } from './references/ContextMapperDslScopeComputation.js'
import { ContextMapperDslCompletionProvider } from './completion/ContextMapperDslCompletionProvider.js'

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ContextMapperDslAddedServices = {
  validation: {
    ContextMapperDslValidator: ContextMapperDslValidator
  }
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ContextMapperDslServices = LangiumServices & ContextMapperDslAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */

type ModuleType = PartialLangiumServices & ContextMapperDslAddedServices;

const semanticTokenProviderRegistry = new SemanticTokenProviderRegistry()
const validationProviderRegistry = new ContextMapperValidationProviderRegistry()

export const ContextMapperDslModule: Module<ContextMapperDslServices, ModuleType> = {
  validation: {
    ContextMapperDslValidator: () => new ContextMapperDslValidator(validationProviderRegistry),
    ValidationRegistry: (services) => new ContextMapperDslValidationRegistry(services, validationProviderRegistry)
  },
  lsp: {
    SemanticTokenProvider: (services) => new ContextMapperDslSemanticTokenProvider(services, semanticTokenProviderRegistry),
    FoldingRangeProvider: (services) => new ContextMapperDslFoldingRangeProvider(services)
  },
  references: {
    ScopeProvider: (services) => new ContextMapperDslScopeProvider(services),
    ScopeComputation: (services) => new ContextMapperDslScopeComputation(services)
  }
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createContextMapperDslServices (context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices,
  ContextMapperDsl: ContextMapperDslServices
} {
  const shared = inject(
    createDefaultSharedModule(context),
    ContextMapperDslGeneratedSharedModule
  )
  const ContextMapperDsl = inject(
    createDefaultModule({ shared }),
    ContextMapperDslGeneratedModule,
    ContextMapperDslModule
  )
  shared.ServiceRegistry.register(ContextMapperDsl)
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({})
  }
  return { shared, ContextMapperDsl }
}
